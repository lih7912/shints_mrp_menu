import React, { useState, useEffect, useRef } from 'react';
import classNames from 'classnames';
import { Route, useHistory, useLocation } from 'react-router-dom';
import { CSSTransition } from 'react-transition-group';

import { AppTopbar } from './AppTopbar';
import { AppFooter } from './AppFooter';
import { AppMenu } from './AppMenu';
import { AppConfig } from './AppConfig';
import { Button } from 'primereact/button';

import MgrKcdBank from './pages/MgrKcdBank';
import MgrKcdUser from './pages/MgrKcdUser';
import MgrKcdSizeMst from './pages/MgrKcdSizeMst';

import PrimeReact from 'primereact/api';
import { Tooltip } from 'primereact/tooltip';
import { TabView, TabPanel } from 'primereact/tabview';
import { TabMenu } from 'primereact/tabmenu';
import { Panel } from 'primereact/panel';

import 'primereact/resources/primereact.css';
import 'primeicons/primeicons.css';
import 'primeflex/primeflex.css';
import 'prismjs/themes/prism-coy.css';
import './assets/demo/flags/flags.css';
import './assets/demo/Demos.scss';
import './assets/layout/layout.scss';
import './App.scss';
import './TabViewDemo.css';
import Iframe from 'react-iframe'

const App = () => {
    const [iframeUrls1, setIframeUrls1] = useState('');
    const [iframeUrls2, setIframeUrls2] = useState('');
    const [iframeUrls3, setIframeUrls3] = useState('');
    const [iframeUrls4, setIframeUrls4] = useState('');
    const [iframeUrls5, setIframeUrls5] = useState('');
    const [iframeUrls6, setIframeUrls6] = useState('');
    const [iframeUrls7, setIframeUrls7] = useState('');
    const [iframeUrls8, setIframeUrls8] = useState('');
    const [iframeUrls9, setIframeUrls9] = useState('');
    const [iframeUrls10, setIframeUrls10] = useState('');
    const [iframeUrls11, setIframeUrls11] = useState('');
    const [iframeUrls12, setIframeUrls12] = useState('');
    const [iframeUrls13, setIframeUrls13] = useState('');
    const [iframeUrls14, setIframeUrls14] = useState('');
    const [iframeUrls15, setIframeUrls15] = useState('');
    const [iframeUrls16, setIframeUrls16] = useState('');
    const [iframeUrls17, setIframeUrls17] = useState('');
    const [iframeUrls18, setIframeUrls18] = useState('');
    const [iframeUrls19, setIframeUrls19] = useState('');
    const [iframeUrls20, setIframeUrls20] = useState('');

    const [iframeTitles1, setIframeTitles1] = useState('');
    const [iframeTitles2, setIframeTitles2] = useState('');
    const [iframeTitles3, setIframeTitles3] = useState('');
    const [iframeTitles4, setIframeTitles4] = useState('');
    const [iframeTitles5, setIframeTitles5] = useState('');
    const [iframeTitles6, setIframeTitles6] = useState('');
    const [iframeTitles7, setIframeTitles7] = useState('');
    const [iframeTitles8, setIframeTitles8] = useState('');
    const [iframeTitles9, setIframeTitles9] = useState('');
    const [iframeTitles10, setIframeTitles10] = useState('');
    const [iframeTitles11, setIframeTitles11] = useState('');
    const [iframeTitles12, setIframeTitles12] = useState('');
    const [iframeTitles13, setIframeTitles13] = useState('');
    const [iframeTitles14, setIframeTitles14] = useState('');
    const [iframeTitles15, setIframeTitles15] = useState('');
    const [iframeTitles16, setIframeTitles16] = useState('');
    const [iframeTitles17, setIframeTitles17] = useState('');
    const [iframeTitles18, setIframeTitles18] = useState('');
    const [iframeTitles19, setIframeTitles19] = useState('');
    const [iframeTitles20, setIframeTitles20] = useState('');

    const [isTabs1, setIsTabs1] = useState('hidden');
    const [isTabs2, setIsTabs2] = useState('hidden');
    const [isTabs3, setIsTabs3] = useState('hidden');
    const [isTabs4, setIsTabs4] = useState('hidden');
    const [isTabs5, setIsTabs5] = useState('hidden');
    const [isTabs6, setIsTabs6] = useState('hidden');
    const [isTabs7, setIsTabs7] = useState('hidden');
    const [isTabs8, setIsTabs8] = useState('hidden');
    const [isTabs9, setIsTabs9] = useState('hidden');
    const [isTabs10, setIsTabs10] = useState('hidden');
    const [isTabs11, setIsTabs11] = useState('hidden');
    const [isTabs12, setIsTabs12] = useState('hidden');
    const [isTabs13, setIsTabs13] = useState('hidden');
    const [isTabs14, setIsTabs14] = useState('hidden');
    const [isTabs15, setIsTabs15] = useState('hidden');
    const [isTabs16, setIsTabs16] = useState('hidden');
    const [isTabs17, setIsTabs17] = useState('hidden');
    const [isTabs18, setIsTabs18] = useState('hidden');
    const [isTabs19, setIsTabs19] = useState('hidden');
    const [isTabs20, setIsTabs20] = useState('hidden');

    const [tabViewDatas, setTabViewDatas] = useState([]);
    const [tabDatas, setTabDatas] = useState([]);
    const [tabDatas1, setTabDatas1] = useState([]);
    const [tabCount, setTabCount] = useState(0);
    const [layoutMode, setLayoutMode] = useState('static');
    const [layoutColorMode, setLayoutColorMode] = useState('light')
    const [inputStyle, setInputStyle] = useState('outlined');
    const [ripple, setRipple] = useState(true);
    const [staticMenuInactive, setStaticMenuInactive] = useState(false);
    const [overlayMenuActive, setOverlayMenuActive] = useState(false);
    const [mobileMenuActive, setMobileMenuActive] = useState(false);
    const [mobileTopbarMenuActive, setMobileTopbarMenuActive] = useState(false);
    const [activeIndex2, setActiveIndex2] = useState(0);
    const [saveIndex2, setSaveIndex2] = useState(-1);


    const copyTooltipRef = useRef();
    const location = useLocation();
    const history = useHistory();

    PrimeReact.ripple = true;

    let menuClick = false;
    let mobileTopbarMenuClick = false;

    const ref_iframe1 = useRef(null);
    const ref_iframe2 = useRef(null);
    const ref_iframe3 = useRef(null);
    const ref_iframe4 = useRef(null);
    const ref_iframe5 = useRef(null);
    const ref_iframe6 = useRef(null);
    const ref_iframe7 = useRef(null);
    const ref_iframe8 = useRef(null);
    const ref_iframe9 = useRef(null);
    const ref_iframe10 = useRef(null);
    const ref_iframe11 = useRef(null);
    const ref_iframe12 = useRef(null);
    const ref_iframe13 = useRef(null);
    const ref_iframe14 = useRef(null);
    const ref_iframe15 = useRef(null);
    const ref_iframe16 = useRef(null);
    const ref_iframe17 = useRef(null);
    const ref_iframe18 = useRef(null);
    const ref_iframe19 = useRef(null);
    const ref_iframe20 = useRef(null);

    const reloadTab = (argIdx) => {
        // ref_iframe1.reload();
        if (typeof ref_iframe1.current !== 'undefined') {
           if (ref_iframe1.current !== null) { 
              console.log('reload tab');
              ref_iframe1.current.src += '';
           }
        }
        // ref_iframe1.src += '';
    } 

    const findCloseTab = (argIdx) => {
        let _tabDatas0 =  JSON.parse(localStorage.getItem('tabinfo1'));
        let _tOnes = _tabDatas0.filter((el) => el.idx === argIdx);
        let _tOne = _tOnes[0];
        return (_tOne);
    }

    const unprocTabDatas = (argIdx) => {

        let _tabDatas0 =  JSON.parse(localStorage.getItem('tabinfo1'));

        let _tOnes = _tabDatas0.filter((el) => el.idx === argIdx);
        let _tOne = _tOnes[0];

        let _globalTabDatas =  JSON.parse(localStorage.getItem('tabinfo'));
        console.log("unprocTabDatas:" + _globalTabDatas.length);
        let _tArray = _globalTabDatas.map(el =>
              el.idx === argIdx ? { ...el, url1: '', label: '' } : el 
           );
        localStorage.setItem('tabinfo', JSON.stringify(_tArray, null, 4));

        let _tabDatas = _tArray.filter((el) => el.url1 !== "");
        let _tabDatas1 = _tabDatas.map((el, index) => ({ ...el, tabidx: index, template: headerTemplate }));
        setTabDatas(_tabDatas1);
        localStorage.setItem('tabinfo1', JSON.stringify(_tabDatas1, null, 4));

        console.log(_tOne);
        let _retObj = {};
        _retObj.src = _tOne;
        _retObj.tab = _tabDatas1[_tabDatas1.length-1];
        return (_retObj);
    }

    const onCloseClick = (argIdx) => {
        let _retObj = unprocTabDatas(argIdx);
        // if (argIdx === _retObj.src.idx) {
        console.log('onCloseClick:' + argIdx + ',' + saveIndex2 + ',' + _retObj.src.idx);
        procAllUnVisible();
        if (argIdx === saveIndex2) {
          procVisible(_retObj.tab.idx, "", "");
          setActiveIndex2(_retObj.tab.tabidx);
          setSaveIndex2(_retObj.tab.idx);
        } else {
          if (typeof _retObj.tab === 'undefined') {
            ;
          } else {
            procVisible(_retObj.tab.idx, "", "");
            setActiveIndex2(_retObj.tab.tabidx);
            setSaveIndex2(_retObj.tab.idx);
          }
        }
    }

    const headerTemplate = (item, options) => {
        return (
           <div className={options.className}>
                <span className={options.labelClassName} target={item.target} onClick={options.onClick}>{item.label}</span>
                <span className={classNames(options.iconClassName, 'pi pi-times')} onClick={(e) => onCloseClick(item.idx)}></span>
           </div>
        );
    }
  
    const makeInits = (argStr) => {
      let _tArray = [];
      let tIdx = 20;
      for (tIdx = 0; tIdx < 20; tIdx ++) {
        let tObj = {};
        tObj.tabidx = tIdx;
        tObj.idx = tIdx;
        tObj.label =  'tab' + (tIdx+1);
        tObj.title =  'tab' + (tIdx+1);
        tObj.content =  argStr;
        tObj.url1 =  '';
        tObj.command1 = unprocTabDatas;
        tObj.template = headerTemplate;
        _tArray.push(tObj);
      }

      localStorage.setItem('tabinfo', JSON.stringify(_tArray, null, 4));
    }

    const [usedIndex, setUsedIndex] = useState([]);
    const [unUsedIndex, setUnUsedIndex] = useState(Array.from({ length: 20 }, (_, i) => (
        {  
           idx: i 
        }
    )));


    const getTabViews_0 = (tab) => {
       // let _url1 = "http://afroba.iptime.org:3201/#/" + tab.url1;
       // let _url1 = `${process.env.APP_URL}` + tab.url1;

       // let _url1 = "http://afroba.iptime.org:3288/webapp/mrpapp/index.html#/" + tab.url1;
       let _url1 = "http://afroba.iptime.org:3101/#/" + tab.url1;
       return (
          <TabPanel key={tab.title} header={tab.content} closable >
            <Iframe url={_url1}
                    width="100%"
                    height="1000px"
                    id="{tab.title}"
                    className="myClassname"
                    display="block"
                    styles={{border: 0}}
                    position="relative"/>
           </TabPanel>
       )
    } 


    const getTabViews_1 = (tab) => {
       var _path = "/" + tab.url1;
       var _component  = null;
       if (tab.url1 === "mgrkcdbank") _component = MgrKcdBank;
       if (tab.url1 === "mgrkcduser") _component = MgrKcdUser;
       if (tab.url1 === "mgrkcdsizemst") _component = MgrKcdSizeMst;
           
       return (
          <TabPanel key={tab.title} header={tab.content} closable >
               <Route path={_path} component={_component} />
          </TabPanel>
       )
    } 


    useEffect(() => {
        document.documentElement.style.fontSize = '14.5px';
    }, []);

    useEffect(() => {
        // history.push('/' + _tTabView.url1);
        makeInits('kkk');
        if (mobileMenuActive) {
            addClass(document.body, "body-overflow-hidden");
        } else {
            removeClass(document.body, "body-overflow-hidden");
        }
    }, [mobileMenuActive]);

    useEffect(() => {
        copyTooltipRef && copyTooltipRef.current && copyTooltipRef.current.updateTargetEvents();
    }, [location]);

    const onInputStyleChange = (inputStyle) => {
        console.log("onInputStyleChange");
        console.log(inputStyle);
        setInputStyle(inputStyle);
    }

    const onRipple = (e) => {
        console.log("onRipple");
        console.log(e);
        PrimeReact.ripple = e.value;
        setRipple(e.value)
    }

    const onLayoutModeChange = (mode) => {
        console.log("onLayoutModeChange");
        setLayoutMode(mode)
    }

    const onColorModeChange = (mode) => {
        console.log("onColorModeChange");
        setLayoutColorMode(mode)
    }

    const onWrapperClick = (event) => {
        if (!menuClick) {
            setOverlayMenuActive(false);
            setMobileMenuActive(false);
        }

        if (!mobileTopbarMenuClick) {
            setMobileTopbarMenuActive(false);
        }

        mobileTopbarMenuClick = false;
        menuClick = false;
    }

    const onToggleMenuClick = (event) => {
        menuClick = true;

        if (isDesktop()) {
            if (layoutMode === 'overlay') {
                if (mobileMenuActive === true) {
                    setOverlayMenuActive(true);
                }

                setOverlayMenuActive((prevState) => !prevState);
                setMobileMenuActive(false);
            }
            else if (layoutMode === 'static') {
                setStaticMenuInactive((prevState) => !prevState);
            }
        }
        else {
            setMobileMenuActive((prevState) => !prevState);
        }

        event.preventDefault();
    }

    const onSidebarClick = () => {
        menuClick = true;
    }

    const onMobileTopbarMenuClick = (event) => {
        mobileTopbarMenuClick = true;

        setMobileTopbarMenuActive((prevState) => !prevState);
        event.preventDefault();
    }

    const onMobileSubTopbarMenuClick = (event) => {
        mobileTopbarMenuClick = true;

        event.preventDefault();
    }

    const procUnVisible = (idx) => {
        if (idx === 0) {
          setIsTabs1('hidden');
        }
        if (idx === 1) {
          setIsTabs2('hidden');
        }
        if (idx === 2) {
          setIsTabs3('hidden');
        }
        if (idx === 3) {
          setIsTabs4('hidden');
        }
        if (idx === 4) {
          setIsTabs5('hidden');
        }
        if (idx === 5) {
          setIsTabs6('hidden');
        }
        if (idx === 6) {
          setIsTabs7('hidden');
        }
        if (idx === 7) {
          setIsTabs8('hidden');
        }
        if (idx === 8) {
          setIsTabs9('hidden');
        }
        if (idx === 9) {
          setIsTabs10('hidden');
        }
        if (idx === 10) {
          setIsTabs11('hidden');
        }
        if (idx === 11) {
          setIsTabs12('hidden');
        }
        if (idx === 12) {
          setIsTabs13('hidden');
        }
        if (idx === 13) {
          setIsTabs14('hidden');
        }
        if (idx === 14) {
          setIsTabs15('hidden');
        }
        if (idx === 15) {
          setIsTabs16('hidden');
        }
        if (idx === 16) {
          setIsTabs17('hidden');
        }
        if (idx === 17) {
          setIsTabs18('hidden');
        }
        if (idx === 18) {
          setIsTabs19('hidden');
        }
        if (idx === 19) {
          setIsTabs20('hidden');
        }
    }

    const procAllUnVisible = () => {
          setIsTabs1('hidden');
          setIsTabs2('hidden');
          setIsTabs3('hidden');
          setIsTabs4('hidden');
          setIsTabs5('hidden');
          setIsTabs6('hidden');
          setIsTabs7('hidden');
          setIsTabs8('hidden');
          setIsTabs9('hidden');
          setIsTabs10('hidden');
          setIsTabs11('hidden');
          setIsTabs12('hidden');
          setIsTabs13('hidden');
          setIsTabs14('hidden');
          setIsTabs15('hidden');
          setIsTabs16('hidden');
          setIsTabs17('hidden');
          setIsTabs18('hidden');
          setIsTabs19('hidden');
          setIsTabs20('hidden');
    }

    const procVisible = (idx, argUrl, argLabel) => {
        if (idx === 0) {
          setIsTabs1('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls1(argUrl);
            setIframeTitles1(argLabel);
          }
        }
        if (idx === 1) {
          setIsTabs2('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls2(argUrl);
            setIframeTitles2(argLabel);
          }
        }
        if (idx === 2) {
          setIsTabs3('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls3(argUrl);
            setIframeTitles3(argLabel);
          }
        }
        if (idx === 3) {
          setIsTabs4('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls4(argUrl);
            setIframeTitles4(argLabel);
          }
        }
        if (idx === 4) {
          setIsTabs5('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls5(argUrl);
            setIframeTitles5(argLabel);
          }
        }
        if (idx === 5) {
          setIsTabs6('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls6(argUrl);
            setIframeTitles6(argLabel);
          }
        }
        if (idx === 6) {
          setIsTabs7('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls7(argUrl);
            setIframeTitles7(argLabel);
          }
        }
        if (idx === 7) {
          setIsTabs8('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls8(argUrl);
            setIframeTitles8(argLabel);
          }
        }
        if (idx === 8) {
          setIsTabs9('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls9(argUrl);
            setIframeTitles9(argLabel);
          }
        }
        if (idx === 9) {
          setIsTabs10('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls10(argUrl);
            setIframeTitles10(argLabel);
          }
        }
        if (idx === 10) {
          setIsTabs11('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls11(argUrl);
            setIframeTitles11(argLabel);
          }
        }
        if (idx === 11) {
          setIsTabs12('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls12(argUrl);
            setIframeTitles12(argLabel);
          }
        }
        if (idx === 12) {
          setIsTabs13('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls13(argUrl);
            setIframeTitles13(argLabel);
          }
        }
        if (idx === 13) {
          setIsTabs14('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls14(argUrl);
            setIframeTitles14(argLabel);
          }
        }
        if (idx === 14) {
          setIsTabs15('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls15(argUrl);
            setIframeTitles15(argLabel);
          }
        }
        if (idx === 15) {
          setIsTabs16('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls16(argUrl);
            setIframeTitles16(argLabel);
          }
        }
        if (idx === 16) {
          setIsTabs17('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls17(argUrl);
            setIframeTitles17(argLabel);
          }
        }
        if (idx === 17) {
          setIsTabs18('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls18(argUrl);
            setIframeTitles18(argLabel);
          }
        }
        if (idx === 18) {
          setIsTabs19('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls19(argUrl);
            setIframeTitles19(argLabel);
          }
        }
        if (idx === 19) {
          setIsTabs20('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls20(argUrl);
            setIframeTitles20(argLabel);
          }
        }
    }

    const getTabIndex1 = () => {
        let _tArray = JSON.parse(localStorage.getItem('tabinfo'));
        let _tIdx = 0;
        for (_tIdx = 0; _tIdx < _tArray.length; _tIdx ++) {
          let tOne = _tArray[_tIdx];
          if (tOne.url1 === '') {
             return (tOne);
          }
        }
        let _tObj = {};
         _tObj.idx = -1;
        return (_tObj);
    }


    const findTabIndex1 = (event) => {
        let _tArray = JSON.parse(localStorage.getItem('tabinfo'));
        let _tIdx = 0;
        for (_tIdx = 0; _tIdx < _tArray.length; _tIdx ++) {
          let tOne = _tArray[_tIdx];
          if (tOne.label === event.item.label) {
             return (tOne);
          }
        }
        let _tObj = {};
         _tObj.idx = -1;
        return (_tObj);
    }

    const onMenuItemClick = (event) => {

        let _tabDatas = [];
        var _findObj0 = findTabIndex1(event);
        if (_findObj0.idx >= 0) { 
          onTabChangeProgram (_findObj0);
          return;
        }
        
        var _retObj0 = getTabIndex1();
        if (_retObj0.idx < 0) return;
      
        var _retObj = procTabDatas(_retObj0.idx, event.item.url1, event.item.label);

        procUnVisible(saveIndex2);
        // let _url1 = `${process.env.APP_URL}` + event.item.url1;

        // let _url1 = "http://afroba.iptime.org:3288/webapp/mrpapp/index.html#/" + event.item.url1;
        let _url1 = "http://afroba.iptime.org:3201/#/" + event.item.url1;
        procVisible(_retObj.idx, _url1, event.item.label);

        console.log('onMennItem:' + saveIndex2 + ',' + _retObj.idx);

        setActiveIndex2(_retObj.tabidx);
        setSaveIndex2(_retObj.idx);

        if (!event.item.items) {
            setOverlayMenuActive(false);
            setMobileMenuActive(false);
        }
    }

    const procTabDatas = (argIdx, argUrl, argLabel) => {
        let _globalTabDatas =  JSON.parse(localStorage.getItem('tabinfo'));
        console.log("procTabDatas:" + _globalTabDatas.length);
        let _tArray = _globalTabDatas.map(el =>
              el.idx === argIdx ? { ...el, url1: argUrl, label:argLabel } : el 
           );
        localStorage.setItem('tabinfo', JSON.stringify(_tArray, null, 4));

        let _tabDatas = _tArray.filter((el) => el.url1 !== "");
        let _tabDatas1 = _tabDatas.map((el, index) => ({ ...el, tabidx: index, template: headerTemplate }));
        setTabDatas(_tabDatas1);
        localStorage.setItem('tabinfo1', JSON.stringify(_tabDatas1, null, 4));

        console.log(_tabDatas1);
        return (_tabDatas1[_tabDatas1.length-1]);

    }

    const onClickClose = (event) => {
        console.log("onClickClose:tabDatas=>" + tabDatas.length);
    }

    const onTabChange1 = (event) => {
        console.log(event.value.idx);

        let _tArray = JSON.parse(localStorage.getItem('tabinfo1'));
        console.log(_tArray);

        let _tOnes = _tArray.filter((el) => el.idx === event.value.idx);
        let _tOne = _tOnes[0];

        let _tOne1s = _tArray.filter((el) => el.idx === saveIndex2);
        let _tOne1 = _tOne1s[0];

        procUnVisible(_tOne1.idx);
        procVisible(_tOne.idx, "", "");

        console.log("onTabChange1:" + event.value.idx + "," + _tOne.tabidx + "," + _tOne.idx);

        let _tFind = _tArray.filter((el) => el.idx === event.value.idx);
        let _tabIdx = _tFind[0].tabidx;

        setActiveIndex2(_tabIdx);
        setSaveIndex2(_tOne.idx);
    }


    const onTabChangeProgram = (argData) => {
        console.log(argData.idx);

        let _tArray = JSON.parse(localStorage.getItem('tabinfo1'));
        console.log(_tArray);

        let _tOnes = _tArray.filter((el) => el.idx === argData.idx);
        let _tOne = _tOnes[0];

        let _tOne1s = _tArray.filter((el) => el.idx === saveIndex2);
        let _tOne1 = _tOne1s[0];

        procUnVisible(_tOne1.idx);
        procVisible(_tOne.idx, "", "");

        console.log("onTabChangeProgram:" + argData.idx + "," + _tOne.tabidx + "," + _tOne.idx);

        let _tFind = _tArray.filter((el) => el.idx === argData.idx);
        let _tabIdx = _tFind[0].tabidx;

        setActiveIndex2(_tabIdx);
        setSaveIndex2(_tOne.idx);
    }


    const isDesktop = () => {
        return window.innerWidth >= 992;
    }

    const menu = [
        {
            label: '기초정보관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0110)은행계좌관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0110_KCD_BANK_QRY' },
                { label: '(S0111)사용자관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0111_KCD_USER' },
                { label: '(S0107)사이즈관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0107_KCD_SIZEMST'},
                { label: '(S0113)바이어관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0113_KCD_BUYER'},
                { label: '(S0114)공급사관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0114_KCD_SUPPLIER'},
                { label: '(S0101)공장관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0101_KCD_FACTORY'},
                { label: '(S0108)Forwarder관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0108_KCD_PLACE'},
                { label: '(S0105)HS_CODE관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0105_KCD_HSCODE'},
                { label: '(S0112)Currency관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0112_KCD_CURRENCY'},
                { label: '(S0218)원가적용환율관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0218_EXCHANGE_RATE_RECORD'},
                { label: '(S0104)국가관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0104_KCD_NATION'},
                { label: '로스관리', icon: 'pi pi-fw pi-user-edit', url1: ''},
            ]
        },
        {
            label: '오더관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0200)스타일관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0200_KCD_STYLE' },
                { label: '(S0202)Style Cost', icon: 'pi pi-fw pi-user-edit', url1: 'S0202_STYLE_COST' },
                { label: '(S0203)Sample Cost', icon: 'pi pi-fw pi-user-edit', url1: 'S0203_SAMPLE_COST' },
                { label: '(S0204)Order관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0204_ORDER_LIST'},
                { label: '(S020602)Order등록', icon: 'pi pi-fw pi-user-edit', url1: 'S020602_ORDER_REG'},
                { label: 'PO관리', icon: 'pi pi-fw pi-user-edit', url1: ''},
                { label: '(S0207)PO등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0207_PO_REGIST'},
                { label: '(S0205)PI관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0205_PI_MANAGER'},
                { label: '(S0208)Capa 관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0208_CAPABOOK_RECORD_BVT'},
                { label: '(S0209)Capa 조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0209_CAPABOOK_LIST_BVT'},
                { label: '(S0210)Capa 관리(Sample)', icon: 'pi pi-fw pi-user-edit', url1: 'S0210_CAPABOOK_RECORD_SAMPLE_BVT'},
                { label: '(S0211)Capa 조회(Sample)', icon: 'pi pi-fw pi-user-edit', url1: 'S0211_CAPABOOK_LIST_SAMPLE_BVT'},
                { label: '(S0212)Nego CMPT', icon: 'pi pi-fw pi-user-edit', url1: 'S0212_NEGO_CMPT'},
                { label: '(S0213)손익현황', icon: 'pi pi-fw pi-user-edit', url1: 'S0213_ORDER_REPORT'},
                { label: '(S0214)Order Status', icon: 'pi pi-fw pi-user-edit', url1: 'S0214_ORDER_STATUS_BEFORE_AFTER_CHECK'},
                { label: '(S0215)Over/Shortage', icon: 'pi pi-fw pi-user-edit', url1: 'S0215_ORDER_STATUS_SHORTAGE'},
                { label: '(S0216)Sale Matl Plan관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0216_SALES_MATL_PLAN_QRY'},
                { label: '(S0217)Sale Matl Plan조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0217_SALES_MATL_PLAN_LIST'}
            ]
        },
        {
            label: 'MRP관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0301)자재등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0301_MATL_RECORD' },
                { label: '(S0302)자재조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0302_MATL_SEARCH'},
                { label: '(S0303)MRP Record Style', icon: 'pi pi-fw pi-user-edit', url1: 'S0303_MRP_RECORD_STYLE'},
                { label: '(S0305)MRP Manager', icon: 'pi pi-fw pi-user-edit', url1: 'S0305_MRP_MANAGER'},
                { label: '(S0306)MRP Record(Order)', icon: 'pi pi-fw pi-user-edit', url1: 'S0306_MRP_BY_ORDER'}
            ]
        },
        {
            label: '구매관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0401)Purchase관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0401_PURCHASING_MANAGER' },
                { label: '(S0430)입고등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0430_STSIN_RECORD'},
                { label: '(S0407)입고등록(LC)', icon: 'pi pi-fw pi-user-edit', url1: 'S0407_STSI N_DEPOSIT_LC'},
                { label: '(S043001)입고관리', icon: 'pi pi-fw pi-user-edit', url1: 'S043001_STSIN_LIST'},
                { label: '(S0431)출고등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0431_STSOUT_RECORD'},
                { label: '(S043101)출고관리', icon: 'pi pi-fw pi-user-edit', url1: 'S043101_STSOUT_LIST'},
                { label: '(S0419)Bill Regist', icon: 'pi pi-fw pi-user-edit', url1: 'S0419_ENDDING_MATL_AMT_DOMESTIC'},
                { label: '(S0423)Bill Manager', icon: 'pi pi-fw pi-user-edit', url1: 'S0423_TAXBILL'}
            ]
        },
        {
            label: '수출입관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0434)Shippment관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0434_SHIPMENT_MANAGER' },
                { label: '(S0413)수출등록(국내)', icon: 'pi pi-fw pi-user-edit', url1: 'S0413_INVOICE_REG_MATL'},
                { label: '(S0604)수입등록(국내)', icon: 'pi pi-fw pi-user-edit', url1: 'S0604_IMPORT_CHARGE_RECORD'},
                { label: '(S0605)수입등록(국내)조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0605_IMPORT_CHARGE_LIST'},
                { label: '(S0601)수입등록(해외)', icon: 'pi pi-fw pi-user-edit', url1: 'S0601_INVOICE_REG_OVERSEA'},
                { label: '(S0414)Invoice조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0414_INVOICE_QRY_MATL'},
                { label: '(S0416)Delay Report', icon: 'pi pi-fw pi-user-edit', url1: 'S0416_MATL_DELAY_REPORT'}
            ]
        },
        {
            label: '공장입출고관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0501)관리메인', icon: 'pi pi-fw pi-user-edit', url1: 'S0501_FACTORY_IO_MAIN' },
                { label: 'Clearance_Arrival', icon: 'pi pi-fw pi-user-edit', url1: '' },
                { label: '(S0505)Inspection Report', icon: 'pi pi-fw pi-user-edit', url1: 'S0505_FACTORY_INPUT_RECORD' },
                { label: '(S0504)FAC-IN조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0504_FACTORY_INPUT_LIST' },
                { label: '(S0516)재고확인', icon: 'pi pi-fw pi-user-edit', url1: 'S0516_STOCK_USE_CONFIRM' },
                { label: '(S0507)Fac-Out등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0507_FACTORY_OUTPUT_RECORD' },
                { label: '(S0506)Fac-Out조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0506_FACTORY_OUTPUT_LIST' },
                { label: '(S0508)생산종료', icon: 'pi pi-fw pi-user-edit', url1: 'S0508_PRODUCTION_COMPLETE' },
                { label: '(S0509)반납등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0509_RETURN_MATL' },
                { label: 'Pendding Shipment', icon: 'pi pi-fw pi-user-edit', url1: '' },
                { label: '(S0511)자재재고등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0511_STOCK_RECORD' },
                { label: '(S0512)자재재고관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0512_STOCK_LIST' },
                { label: '(S0517)Stock I/O History', icon: 'pi pi-fw pi-user-edit', url1: 'S0517_STOCK_HISTORY'},
                { label: '(S0513)선적등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0513_SHIPPING_REGIST_BVT'},
                { label: '(S0514)선적관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0514_SHIPPING_LIST_BVT_OLD'}
            ]
        },
        {
            label: '지출관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: 'Cost Confirm', icon: 'pi pi-fw pi-user-edit', url1: '' },
                { label: '(S0705)CMPT Payment', icon: 'pi pi-fw pi-user-edit', url1: 'S0705_CMPT_PAYMENT' },
                { label: '(S0701)Credit Note', icon: 'pi pi-fw pi-user-edit', url1: 'S0701_CREDIT_NOTE'},
                { label: '(S0702)Debit Note', icon: 'pi pi-fw pi-user-edit', url1: 'S0702_DEBIT_NOTE'},
                { label: '(S0703)Debit Note(F)', icon: 'pi pi-fw pi-user-edit', url1: 'S0703_DEBIT_NOTE_FACTORY_BVT'},
                { label: '수입자재미지급조회', icon: 'pi pi-fw pi-user-edit', url1: ''},
                { label: '(S0704)자재금액결제', icon: 'pi pi-fw pi-user-edit', url1: 'S0704_PAYMENT_MATL_AMT'},
                { label: '(S0706)수입업체결제', icon: 'pi pi-fw pi-user-edit', url1: 'S0706_PAYMENT_IMPORT_VENDOR'}
            ]
        },
        {
            label: '매출관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '(S0609)관세환급관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0609_MANAGE_RETURN_TAX' },
                { label: '(S0413)매출등록(국내)', icon: 'pi pi-fw pi-user-edit', url1: 'S0413_INVOICE_REG_MATL' },
                { label: '(S0606)매출등록(해외)', icon: 'pi pi-fw pi-user-edit', url1: 'S0606_IMPORT_REG' },
                { label: '(S0603)Invoice조회(제품)', icon: 'pi pi-fw pi-user-edit', url1: 'S0603_INVOICE_LIST'},
                { label: '(S0607)Nego입금등록', icon: 'pi pi-fw pi-user-edit', url1: 'S0607_NEGO'},
                { label: '(S0608)Nego입금관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0608_NEGO_LIST'},
                { label: '(S0707)TT입금관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0707_MAN_INVOICE'},
                { label: '(S0708)바이어별입금관리', icon: 'pi pi-fw pi-user-edit', url1: 'S0708_MANAGE_BUYER_INPUT'},
                { label: '(S0709)매출채권조회', icon: 'pi pi-fw pi-user-edit', url1: 'S0709_MANAGE_INVOICE_AMT'},
                { label: '(S0710)오더수불부', icon: 'pi pi-fw pi-user-edit', url1: 'S0710_ORDER_EXPORT_REPORT'}
            ]
        }
    ];

    const addClass = (element, className) => {
        if (element.classList)
            element.classList.add(className);
        else
            element.className += ' ' + className;
    }

    const removeClass = (element, className) => {
        if (element.classList)
            element.classList.remove(className);
        else
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }

    const wrapperClass = classNames('layout-wrapper', {
        'layout-overlay': layoutMode === 'overlay',
        'layout-static': layoutMode === 'static',
        'layout-static-sidebar-inactive': staticMenuInactive && layoutMode === 'static',
        'layout-overlay-sidebar-active': overlayMenuActive && layoutMode === 'overlay',
        'layout-mobile-sidebar-active': mobileMenuActive,
        'p-input-filled': inputStyle === 'filled',
        'p-ripple-disabled': ripple === false,
        'layout-theme-light': layoutColorMode === 'light'
    });

    return (
        <div className={wrapperClass} onClick={onWrapperClick}>
            <Tooltip ref={copyTooltipRef} target=".block-action-copy" position="bottom" content="Copied to clipboard" event="focus" />

            <AppTopbar onToggleMenuClick={onToggleMenuClick} layoutColorMode={layoutColorMode}
                mobileTopbarMenuActive={mobileTopbarMenuActive} onMobileTopbarMenuClick={onMobileTopbarMenuClick} onMobileSubTopbarMenuClick={onMobileSubTopbarMenuClick} />

            <div className="layout-sidebar" onClick={onSidebarClick}>
                <AppMenu model={menu} onMenuItemClick={onMenuItemClick} layoutColorMode={layoutColorMode} />
            </div>

            <div className="layout-main-container">
                <div className="layout-main">
                    <TabMenu model={tabDatas} activeIndex={activeIndex2} onTabChange={onTabChange1} />
                    <div className={isTabs1} >
                       {/* <Button style={{ padding: '0rem' }} label="Reload" icon="pi pi-check" className="p-button-text" onClick={reloadTab(1)} /> */}
                       <iframe src={iframeUrls1}
                               ref={ref_iframe1}
                               width="100%"
                               height="900px"
                               id="id1"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs2} >
                       <iframe src={iframeUrls2}
                               ref={ref_iframe2}
                               width="100%"
                               height="900px"
                               id="id2"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs3} >
                       <iframe src={iframeUrls3}
                               ref={ref_iframe3}
                               width="100%"
                               height="900px"
                               id="id3"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs4} >
                       <iframe src={iframeUrls4}
                               ref={ref_iframe4}
                               width="100%"
                               height="900px"
                               id="id4"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs5} >
                       <iframe src={iframeUrls5}
                               ref={ref_iframe5}
                               width="100%"
                               height="900px"
                               id="id5"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs6} >
                       <iframe src={iframeUrls6}
                               ref={ref_iframe6}
                               width="100%"
                               height="900px"
                               id="id6"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs7} >
                       <iframe src={iframeUrls7}
                               ref={ref_iframe7}
                               width="100%"
                               height="900px"
                               id="id7"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs8} >
                       <iframe src={iframeUrls8}
                               ref={ref_iframe8}
                               width="100%"
                               height="900px"
                               id="id8"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs9} >
                       <iframe src={iframeUrls9}
                               ref={ref_iframe9}
                               width="100%"
                               height="900px"
                               id="id9"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs10} >
                       <iframe src={iframeUrls10}
                               ref={ref_iframe10}
                               width="100%"
                               height="900px"
                               id="id10"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs11} >
                       <iframe src={iframeUrls11}
                               ref={ref_iframe11}
                               width="100%"
                               height="900px"
                               id="id11"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs12} >
                       <iframe src={iframeUrls12}
                               ref={ref_iframe12}
                               width="100%"
                               height="900px"
                               id="id12"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs13} >
                       <iframe src={iframeUrls13}
                               ref={ref_iframe13}
                               width="100%"
                               height="900px"
                               id="id13"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs14} >
                       <iframe src={iframeUrls14}
                               ref={ref_iframe14}
                               width="100%"
                               height="900px"
                               id="id14"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs15} >
                       <iframe src={iframeUrls15}
                               ref={ref_iframe15}
                               width="100%"
                               height="900px"
                               id="id15"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs16} >
                       <iframe src={iframeUrls16}
                               ref={ref_iframe16}
                               width="100%"
                               height="900px"
                               id="id16"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs17} >
                       <iframe src={iframeUrls17}
                               ref={ref_iframe17}
                               width="100%"
                               height="900px"
                               id="id17"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs18} >
                       <iframe src={iframeUrls18}
                               ref={ref_iframe18}
                               width="100%"
                               height="900px"
                               id="id18"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs19} >
                       <iframe src={iframeUrls19}
                               ref={ref_iframe19}
                               width="100%"
                               height="900px"
                               id="id19"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs20} >
                       <iframe src={iframeUrls20}
                               ref={ref_iframe20}
                               width="100%"
                               height="900px"
                               id="id20"
                               className="myClassname"
                               />
                    </div>
                </div>

                <AppFooter layoutColorMode={layoutColorMode} />
            </div>

            <CSSTransition classNames="layout-mask" timeout={{ enter: 200, exit: 200 }} in={mobileMenuActive} unmountOnExit>
                <div className="layout-mask p-component-overlay"></div>
            </CSSTransition>

        </div>
    );

}

export default App;
