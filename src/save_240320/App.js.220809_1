import React, { useState, useEffect, useRef } from 'react';
import classNames from 'classnames';
import { Route, useHistory, useLocation } from 'react-router-dom';
import { CSSTransition } from 'react-transition-group';

import { AppTopbar } from './AppTopbar';
import { AppFooter } from './AppFooter';
import { AppMenu } from './AppMenu';
import { AppConfig } from './AppConfig';

import MgrKcdBank from './pages/MgrKcdBank';
import MgrKcdUser from './pages/MgrKcdUser';
import MgrKcdSizeMst from './pages/MgrKcdSizeMst';

import PrimeReact from 'primereact/api';
import { Tooltip } from 'primereact/tooltip';
import { TabView, TabPanel } from 'primereact/tabview';
import { TabMenu } from 'primereact/tabmenu';
import { Panel } from 'primereact/panel';

import 'primereact/resources/primereact.css';
import 'primeicons/primeicons.css';
import 'primeflex/primeflex.css';
import 'prismjs/themes/prism-coy.css';
import './assets/demo/flags/flags.css';
import './assets/demo/Demos.scss';
import './assets/layout/layout.scss';
import './App.scss';
import './TabViewDemo.css';
import Iframe from 'react-iframe'

const App = () => {
    const [iframeUrls1, setIframeUrls1] = useState('');
    const [iframeUrls2, setIframeUrls2] = useState('');
    const [iframeUrls3, setIframeUrls3] = useState('');
    const [iframeUrls4, setIframeUrls4] = useState('');
    const [iframeUrls5, setIframeUrls5] = useState('');
    const [iframeUrls6, setIframeUrls6] = useState('');
    const [iframeUrls7, setIframeUrls7] = useState('');
    const [iframeUrls8, setIframeUrls8] = useState('');
    const [iframeUrls9, setIframeUrls9] = useState('');
    const [iframeUrls10, setIframeUrls10] = useState('');

    const [isTabs1, setIsTabs1] = useState('hidden');
    const [isTabs2, setIsTabs2] = useState('hidden');
    const [isTabs3, setIsTabs3] = useState('hidden');
    const [isTabs4, setIsTabs4] = useState('hidden');
    const [isTabs5, setIsTabs5] = useState('hidden');
    const [isTabs6, setIsTabs6] = useState('hidden');
    const [isTabs7, setIsTabs7] = useState('hidden');
    const [isTabs8, setIsTabs8] = useState('hidden');
    const [isTabs9, setIsTabs9] = useState('hidden');
    const [isTabs10, setIsTabs10] = useState('hidden');

    const [tabViewDatas, setTabViewDatas] = useState([]);
    const [tabDatas, setTabDatas] = useState([]);
    const [tabDatas1, setTabDatas1] = useState([]);
    const [tabCount, setTabCount] = useState(0);
    const [layoutMode, setLayoutMode] = useState('static');
    const [layoutColorMode, setLayoutColorMode] = useState('light')
    const [inputStyle, setInputStyle] = useState('outlined');
    const [ripple, setRipple] = useState(true);
    const [staticMenuInactive, setStaticMenuInactive] = useState(false);
    const [overlayMenuActive, setOverlayMenuActive] = useState(false);
    const [mobileMenuActive, setMobileMenuActive] = useState(false);
    const [mobileTopbarMenuActive, setMobileTopbarMenuActive] = useState(false);
    const [activeIndex2, setActiveIndex2] = useState(0);
    const [saveIndex2, setSaveIndex2] = useState(0);

    const [usedIndex, setUsedIndex] = useState([]);
    const [unUsedIndex, setUnUsedIndex] = useState([]);

    const copyTooltipRef = useRef();
    const location = useLocation();
    const history = useHistory();

    let gTabDatas = [];

    PrimeReact.ripple = true;

    let menuClick = false;
    let mobileTopbarMenuClick = false;

    const iframe1 = useRef(null);
    const iframe2 = useRef(null);
    const iframe3 = useRef(null);

    const getTabViews_0 = (tab) => {
       let _url1 = "http://localhost:3000/#/" + tab.url1;
       return (
          <TabPanel key={tab.title} header={tab.content} closable >
            <Iframe url={_url1}
                    width="100%"
                    height="900px"
                    id="{tab.title}"
                    className="myClassname"
                    display="block"
                    styles={{border: 0}}
                    position="relative"/>
           </TabPanel>
       )
    } 


    const getTabViews_1 = (tab) => {
       var _path = "/" + tab.url1;
       var _component  = null;
       if (tab.url1 === "mgrkcdbank") _component = MgrKcdBank;
       if (tab.url1 === "mgrkcduser") _component = MgrKcdUser;
       if (tab.url1 === "mgrkcdsizemst") _component = MgrKcdSizeMst;
           
       return (
          <TabPanel key={tab.title} header={tab.content} closable >
               <Route path={_path} component={_component} />
          </TabPanel>
       )
    } 

    useEffect(() => {
        var _tabDatas = [];
        makeTabDatas();
        useTabDatas(0, 'mgrkcdbank');
        _tabDatas = gDataTabs.filter((el) => el.url1 !== "");
        setTabDatas(_tabDatas);

        let _unUsedIndex = Array.from({ length: 9 }, (_, i) => ({ idx: (i+1)}));
        setUnUsedIndex(_unUsedIndex);

        // history.push('/' + _tTabView.url1);
        setIsTabs1('show0');
        setIframeUrls1('http://localhost:3000/#/mgrkcdbank');
        setSaveIndex2(0);

        if (mobileMenuActive) {
            addClass(document.body, "body-overflow-hidden");
        } else {
            removeClass(document.body, "body-overflow-hidden");
        }
    }, [mobileMenuActive]);

    useEffect(() => {
        copyTooltipRef && copyTooltipRef.current && copyTooltipRef.current.updateTargetEvents();
    }, [location]);

    const onInputStyleChange = (inputStyle) => {
        setInputStyle(inputStyle);
    }

    const onRipple = (e) => {
        PrimeReact.ripple = e.value;
        setRipple(e.value)
    }

    const onLayoutModeChange = (mode) => {
        setLayoutMode(mode)
    }

    const onColorModeChange = (mode) => {
        setLayoutColorMode(mode)
    }

    const onWrapperClick = (event) => {
        if (!menuClick) {
            setOverlayMenuActive(false);
            setMobileMenuActive(false);
        }

        if (!mobileTopbarMenuClick) {
            setMobileTopbarMenuActive(false);
        }

        mobileTopbarMenuClick = false;
        menuClick = false;
    }

    const onToggleMenuClick = (event) => {
        menuClick = true;

        if (isDesktop()) {
            if (layoutMode === 'overlay') {
                if (mobileMenuActive === true) {
                    setOverlayMenuActive(true);
                }

                setOverlayMenuActive((prevState) => !prevState);
                setMobileMenuActive(false);
            }
            else if (layoutMode === 'static') {
                setStaticMenuInactive((prevState) => !prevState);
            }
        }
        else {
            setMobileMenuActive((prevState) => !prevState);
        }

        event.preventDefault();
    }

    const onSidebarClick = () => {
        menuClick = true;
    }

    const onMobileTopbarMenuClick = (event) => {
        mobileTopbarMenuClick = true;

        setMobileTopbarMenuActive((prevState) => !prevState);
        event.preventDefault();
    }

    const onMobileSubTopbarMenuClick = (event) => {
        mobileTopbarMenuClick = true;

        event.preventDefault();
    }

    const procUnVisible = (idx) => {
        if (idx === 0) {
          setIsTabs1('hidden');
        }
        if (idx === 1) {
          setIsTabs2('hidden');
        }
        if (idx === 2) {
          setIsTabs3('hidden');
        }
        if (idx === 3) {
          setIsTabs4('hidden');
        }
        if (idx === 4) {
          setIsTabs5('hidden');
        }
        if (idx === 5) {
          setIsTabs6('hidden');
        }
        if (idx === 6) {
          setIsTabs7('hidden');
        }
        if (idx === 7) {
          setIsTabs8('hidden');
        }
        if (idx === 8) {
          setIsTabs9('hidden');
        }
        if (idx === 9) {
          setIsTabs10('hidden');
        }
    }

    const procVisible = (idx, argUrl) => {
        if (idx === 0) {
          setIsTabs1('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls1(argUrl);
          }
        }
        if (idx === 1) {
          setIsTabs2('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls2(argUrl);
          }
        }
        if (idx === 2) {
          setIsTabs3('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls3(argUrl);
          }
        }
        if (idx === 3) {
          setIsTabs4('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls4(argUrl);
          }
        }
        if (idx === 4) {
          setIsTabs5('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls5(argUrl);
          }
        }
        if (idx === 5) {
          setIsTabs6('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls6(argUrl);
          }
        }
        if (idx === 6) {
          setIsTabs7('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls7(argUrl);
          }
        }
        if (idx === 7) {
          setIsTabs8('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls8(argUrl);
          }
        }
        if (idx === 8) {
          setIsTabs9('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls9(argUrl);
          }
        }
        if (idx === 9) {
          setIsTabs10('show0');
          if (argUrl === "") {
            ;
          } else {
            setIframeUrls10(argUrl);
          }
        }
    }

    const getTabIndex1 = () => {
        let _unUsedIndex = [...unUsedIndex];
        if (_unUsedIndex.length <= 0) return (-1);
        let _oneObj = _unUsedIndex[0];
        let _retIndex = _oneObj.idx;
  
        console.log("getTabIndex1: _unUsedIndex:" + _unUsedIndex.length);
        let _unUsedIndex1 = _unUsedIndex.filter((el) => el.idx !== _retIndex); 
        console.log("getTabIndex1: _unUsedIndex1:" + _unUsedIndex1.length);

        setUnUsedIndex(_unUsedIndex1);

        let _usedIndex = [...usedIndex];
        _usedIndex.push(_oneObj);
        console.log("getTabIndex1: _usedIndex:" + _usedIndex.length);

        setUsedIndex(_usedIndex);

        return (_retIndex);
    }

    const closeTabIndex1 = (argIdx) => {
        let _usedIndex = [...usedIndex];
        console.log("closeTabIndex1: _usedIndex:" + _usedIndex.length);

        let _oneObj = {};

        let _usedIndex0 = _usedIndex.filter((el) => el.idx === argIdx); 
        _oneObj = _usedIndex0[0];
        console.log("closeTabIndex1:_usedIndex0:" + _usedIndex0.length);

        let _usedIndex1 = _usedIndex.filter((el) => el.idx !== argIdx); 
        console.log("closeTabIndex1:_usedIndex1:" + _usedIndex1.length);

        setUsedIndex(_usedIndex1);

        let _unUsedIndex = [...unUsedIndex];
        _unUsedIndex.push(_oneObj);
        console.log("closeTabIndex1: _unUsedIndex1:" + _unUsedIndex.length);
        setUnUsedIndex(_unUsedIndex);

        return (argIdx);
    }

    const headerTemplate = (item, options) => {
        return (
           <div className={options.className}>
                <span className={options.labelClassName} target={item.target} onClick={options.onClick}>{item.label}</span>
                <span className={classNames(options.iconClassName, 'pi pi-times')} onClick={(e) => console.log(tabDatas.length)}></span>
           </div>
        );
    }


    const onMenuItemClick = (event) => {

        let _tabDatas = [...tabDatas];
        let _tIndex = getTabIndex1();
        if (_tIndex < 0) return;
        if (_tabDatas.length >= 10) return;
        var _itemObj = {};
        _itemObj.idx = _tIndex;
        _itemObj.label = "tab" + (_tIndex+1);
        _itemObj.title = "tab" + (_tIndex+1);
        _itemObj.content = "은행계좌관리";
        _itemObj.url1 = event.item.url1;
        _itemObj.template = headerTemplate;
        _tabDatas.push(_itemObj);
        setTabDatas(_tabDatas);

        let idx = tabDatas.length;

        procUnVisible(saveIndex2);
        procVisible(idx, "http://localhost:3000/#/" + event.item.url1);

        setActiveIndex2(idx);
        setSaveIndex2(idx);

        if (!event.item.items) {
            setOverlayMenuActive(false);
            setMobileMenuActive(false);
        }
    }

    const makeTabDatas = () => {
        let tIdx = 0;
        for (tIdx = 0; tIdx < 10; tIdx ++) {
        	var _itemObj = {};
        	_itemObj.idx = tIdx;
        	_itemObj.label = "tab" + (tIdx+1);
        	_itemObj.title = "tab" + (tIdx+1);
          _itemObj.content = "은행계좌관리";
          _itemObj.url1 = "";
          gDataTabs.push(_itemObj);
        }
    }

    const setTabDatas = (argIdx, argUrl) => {
        let tOne = gDataTabs[argIdx];
        tOne.url1 = argUrl;
        gDataTabs[argIdx] = tOne;
    }

    const clearTabDatas = (argIdx) => {
        let tOne = gDataTabs[argIdx];
        tOne.url1 = "";
        gDataTabs[argIdx] = tOne;
    }

    const onClickClose = (event) => {
        console.log("onClickClose:tabDatas=>" + tabDatas.length);
    }

    const onClickClose0 = (item) => {
        console.log(item);
        console.log("onClickClose:tabDatas=>" + tabDatas.length);
 
        closeTabIndex1(item.idx);
        procUnVisible(item.idx);

        let _tabDatas = [...tabDatas];
        console.log("onClickClose:_tabDatas=>" + _tabDatas.length);

        let _tabDatas1 = _tabDatas.filter((el) => el.idx !== item.idx);
        setTabDatas(_tabDatas1);

        procVisible(0, "");
        setActiveIndex2(0);
        setSaveIndex2(0);
    }

    const onTabChange1 = (event) => {
        console.log(event);
        console.log('onTabChange1:' + tabDatas.length);
        console.log(event.value.idx);

        procUnVisible(saveIndex2);
        procVisible(event.value.idx, "");

        setActiveIndex2(event.value.idx);
        setSaveIndex2(event.value.idx);
    }


    const isDesktop = () => {
        return window.innerWidth >= 992;
    }

    const menu = [
        {
            label: '기초정보관리', icon: 'pi pi-fw pi-clone',
            items: [
                { label: '은행계좌관리', icon: 'pi pi-fw pi-user-edit', url1: 'mgrkcdbank' },
                { label: '사용자관리', icon: 'pi pi-fw pi-user-edit', url1: 'mgrkcduser' },
                { label: '사이즈관리', icon: 'pi pi-fw pi-user-edit', url1: 'mgrkcdsizemst'}
            ]
        }
    ];

    const addClass = (element, className) => {
        if (element.classList)
            element.classList.add(className);
        else
            element.className += ' ' + className;
    }

    const removeClass = (element, className) => {
        if (element.classList)
            element.classList.remove(className);
        else
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }

    const wrapperClass = classNames('layout-wrapper', {
        'layout-overlay': layoutMode === 'overlay',
        'layout-static': layoutMode === 'static',
        'layout-static-sidebar-inactive': staticMenuInactive && layoutMode === 'static',
        'layout-overlay-sidebar-active': overlayMenuActive && layoutMode === 'overlay',
        'layout-mobile-sidebar-active': mobileMenuActive,
        'p-input-filled': inputStyle === 'filled',
        'p-ripple-disabled': ripple === false,
        'layout-theme-light': layoutColorMode === 'light'
    });

    return (
        <div className={wrapperClass} onClick={onWrapperClick}>
            <Tooltip ref={copyTooltipRef} target=".block-action-copy" position="bottom" content="Copied to clipboard" event="focus" />

            <AppTopbar onToggleMenuClick={onToggleMenuClick} layoutColorMode={layoutColorMode}
                mobileTopbarMenuActive={mobileTopbarMenuActive} onMobileTopbarMenuClick={onMobileTopbarMenuClick} onMobileSubTopbarMenuClick={onMobileSubTopbarMenuClick} />

            <div className="layout-sidebar" onClick={onSidebarClick}>
                <AppMenu model={menu} onMenuItemClick={onMenuItemClick} layoutColorMode={layoutColorMode} />
            </div>

            <div className="layout-main-container">
                <div className="layout-main">
                    <TabMenu model={tabDatas} activeIndex={activeIndex2} onTabChange={onTabChange1} />
                    <div className={isTabs1} >
                       <iframe src={iframeUrls1}
                               width="100%"
                               height="900px"
                               id="id1"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs2} >
                       <iframe src={iframeUrls2}
                               width="100%"
                               height="900px"
                               id="id2"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs3} >
                       <iframe src={iframeUrls3}
                               width="100%"
                               height="900px"
                               id="id3"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs4} >
                       <iframe src={iframeUrls4}
                               width="100%"
                               height="900px"
                               id="id4"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs5} >
                       <iframe src={iframeUrls5}
                               width="100%"
                               height="900px"
                               id="id5"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs6} >
                       <iframe src={iframeUrls6}
                               width="100%"
                               height="900px"
                               id="id6"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs7} >
                       <iframe src={iframeUrls7}
                               width="100%"
                               height="900px"
                               id="id7"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs8} >
                       <iframe src={iframeUrls8}
                               width="100%"
                               height="900px"
                               id="id8"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs9} >
                       <iframe src={iframeUrls9}
                               width="100%"
                               height="900px"
                               id="id9"
                               className="myClassname"
                               />
                    </div>
                    <div className={isTabs10} >
                       <iframe src={iframeUrls10}
                               width="100%"
                               height="900px"
                               id="id10"
                               className="myClassname"
                               />
                    </div>
                </div>

                <AppFooter layoutColorMode={layoutColorMode} />
            </div>

            <AppConfig rippleEffect={ripple} onRippleEffect={onRipple} inputStyle={inputStyle} onInputStyleChange={onInputStyleChange}
                layoutMode={layoutMode} onLayoutModeChange={onLayoutModeChange} layoutColorMode={layoutColorMode} onColorModeChange={onColorModeChange} />

            <CSSTransition classNames="layout-mask" timeout={{ enter: 200, exit: 200 }} in={mobileMenuActive} unmountOnExit>
                <div className="layout-mask p-component-overlay"></div>
            </CSSTransition>

        </div>
    );

}

export default App;
